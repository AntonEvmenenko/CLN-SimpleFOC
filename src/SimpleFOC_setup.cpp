#include "SimpleFOC_setup.h"

#include "motor_config.h"
#include "bsp/cln17_v2.h"

#define POWER_SUPPLY_VOLTAGE 12.0f
#define SENSOR_ALIGN_VOLTAGE 5.0f
#define CURRENT_SENSOR_SHUNT_RESISTANCE 0.025f // [Ohm]
#define CURRENT_SENSOR_GAIN 20.0f // [V/V]

// float encoder_calibration_lut[200] = {0.000503, 0.000720, 0.000977, 0.001431, 0.001668, 0.001886, 0.002104, 0.002578, 0.002834, 0.003090, 0.003270, 0.003648, 0.003808, 0.003968, 0.004167, 0.004390, 0.004473, 0.004536, 0.004522, 0.004514, 0.004481, 0.004428, 0.004395, 0.004214, 0.004105, 0.003937, 0.003713, 0.003283, 0.003000, 0.002718, 0.002512, 0.001967, 0.001685, 0.001441, 0.001139, 0.000556, 0.000273, -0.000047, -0.000368, -0.001028, -0.001330, -0.001612, -0.001913, -0.002516, -0.002818, -0.003061, -0.003305, -0.003582, -0.003596, -0.003610, -0.003547, -0.003441, -0.003435, -0.003391, -0.003348, -0.003337, -0.003312, -0.003326, -0.003321, -0.003253, -0.003190, -0.003108, -0.003026, -0.002842, -0.002741, -0.002602, -0.002462, -0.002144, -0.002005, -0.001865, -0.001764, -0.001485, -0.001403, -0.001302, -0.001200, -0.001094, -0.001012, -0.000949, -0.000828, -0.000626, -0.000544, -0.000443, -0.000380, -0.000197, -0.000095, -0.000032, 0.000069, 0.000214, 0.000296, 0.000416, 0.000537, 0.000873, 0.000994, 0.001133, 0.001254, 0.001667, 0.001941, 0.002196, 0.002508, 0.003017, 0.003329, 0.003622, 0.003915, 0.004539, 0.004775, 0.005049, 0.005342, 0.005928, 0.006182, 0.006399, 0.006577, 0.006837, 0.006976, 0.007097, 0.007179, 0.007343, 0.007367, 0.007334, 0.007282, 0.007063, 0.006934, 0.006786, 0.006580, 0.006150, 0.005868, 0.005585, 0.005303, 0.004643, 0.004284, 0.003886, 0.003470, 0.002656, 0.002240, 0.001804, 0.001349, 0.000439, 0.000004, -0.000470, -0.000867, -0.001758, -0.002232, -0.002648, -0.003103, -0.003879, -0.004257, -0.004597, -0.004898, -0.005367, -0.005476, -0.005548, -0.005562, -0.005570, -0.005603, -0.005636, -0.005688, -0.005716, -0.005730, -0.005724, -0.005738, -0.005727, -0.005684, -0.005640, -0.005539, -0.005260, -0.005120, -0.004980, -0.004802, -0.004523, -0.004345, -0.004167, -0.004009, -0.003653, -0.003494, -0.003355, -0.003234, -0.002993, -0.002854, -0.002785, -0.002716, -0.002613, -0.002527, -0.002424, -0.002340, -0.002135, -0.002032, -0.001929, -0.001769, -0.001583, -0.001518, -0.001454, -0.001409, -0.001261, -0.001139, -0.001017, -0.000952, -0.000709, -0.000529, -0.000311, -0.000074, 0.000323};
// float encoder_calibration_lut[200] = {-0.000572, -0.000182, 0.000285, 0.001047, 0.001418, 0.001808, 0.002141, 0.002903, 0.003216, 0.003530, 0.003786, 0.004201, 0.004399, 0.004635, 0.004851, 0.005168, 0.005308, 0.005371, 0.005453, 0.005502, 0.005546, 0.005551, 0.005518, 0.005490, 0.005419, 0.005329, 0.005257, 0.005057, 0.004966, 0.004857, 0.004747, 0.004509, 0.004476, 0.004423, 0.004314, 0.004248, 0.004157, 0.004105, 0.004053, 0.003910, 0.003896, 0.003883, 0.003850, 0.003822, 0.003827, 0.003833, 0.003915, 0.004271, 0.004544, 0.004876, 0.005226, 0.005793, 0.005971, 0.006091, 0.006116, 0.006126, 0.006132, 0.006137, 0.006123, 0.005942, 0.005852, 0.005762, 0.005614, 0.005317, 0.005189, 0.005021, 0.004873, 0.004558, 0.004314, 0.004108, 0.003903, 0.003473, 0.003267, 0.003081, 0.002894, 0.002541, 0.002354, 0.002206, 0.002058, 0.001800, 0.001691, 0.001524, 0.001433, 0.001290, 0.001257, 0.001282, 0.001268, 0.001298, 0.001323, 0.001309, 0.001372, 0.001593, 0.001714, 0.001872, 0.002031, 0.002330, 0.002488, 0.002647, 0.002844, 0.003219, 0.003455, 0.003671, 0.003830, 0.004166, 0.004210, 0.004254, 0.004278, 0.004232, 0.004179, 0.004089, 0.003979, 0.003664, 0.003478, 0.003253, 0.002971, 0.002291, 0.001894, 0.001477, 0.001061, 0.000132, -0.000342, -0.000778, -0.001329, -0.002296, -0.002827, -0.003397, -0.003871, -0.004877, -0.005351, -0.005806, -0.006280, -0.007247, -0.007644, -0.008080, -0.008458, -0.009022, -0.009305, -0.009548, -0.009754, -0.010127, -0.010313, -0.010404, -0.010475, -0.010541, -0.010517, -0.010492, -0.010352, -0.009882, -0.009550, -0.009123, -0.008638, -0.007669, -0.007261, -0.006891, -0.006579, -0.006031, -0.005757, -0.005560, -0.005363, -0.005007, -0.004906, -0.004709, -0.004608, -0.004329, -0.004151, -0.004088, -0.003910, -0.003669, -0.003644, -0.003582, -0.003615, -0.003623, -0.003618, -0.003837, -0.003998, -0.004428, -0.004537, -0.004530, -0.004562, -0.004625, -0.004656, -0.004688, -0.004738, -0.004763, -0.004737, -0.004672, -0.004589, -0.004383, -0.004281, -0.004178, -0.004017, -0.003774, -0.003537, -0.003338, -0.003159, -0.002665, -0.002390, -0.002057, -0.001705, -0.000963};
float encoder_calibration_lut[200] = {-0.000461, -0.000072, 0.000336, 0.001113, 0.001483, 0.001872, 0.002203, 0.002847, 0.003140, 0.003414, 0.003687, 0.004139, 0.004355, 0.004572, 0.004769, 0.005086, 0.005207, 0.005289, 0.005313, 0.005362, 0.005329, 0.005316, 0.005340, 0.005274, 0.005260, 0.005170, 0.005060, 0.004860, 0.004789, 0.004756, 0.004646, 0.004465, 0.004394, 0.004284, 0.004232, 0.004127, 0.004094, 0.004023, 0.003952, 0.003886, 0.003853, 0.003801, 0.003787, 0.003778, 0.003803, 0.003904, 0.004005, 0.004361, 0.004635, 0.005005, 0.005298, 0.005922, 0.006157, 0.006297, 0.006475, 0.006486, 0.006491, 0.006477, 0.006367, 0.006263, 0.006134, 0.006025, 0.005915, 0.005619, 0.005490, 0.005304, 0.005136, 0.004744, 0.004577, 0.004429, 0.004204, 0.003736, 0.003473, 0.003229, 0.003023, 0.002612, 0.002407, 0.002182, 0.002053, 0.001814, 0.001666, 0.001557, 0.001428, 0.001189, 0.001156, 0.001123, 0.001071, 0.001063, 0.001068, 0.001054, 0.001117, 0.001281, 0.001382, 0.001503, 0.001604, 0.001922, 0.002061, 0.002239, 0.002455, 0.002869, 0.003123, 0.003301, 0.003479, 0.003778, 0.003821, 0.003903, 0.003928, 0.003900, 0.003906, 0.003840, 0.003736, 0.003352, 0.003216, 0.002974, 0.002712, 0.002055, 0.001717, 0.001340, 0.000925, 0.000095, -0.000396, -0.000907, -0.001380, -0.002382, -0.002893, -0.003385, -0.003914, -0.004955, -0.005485, -0.005958, -0.006411, -0.007337, -0.007714, -0.008090, -0.008467, -0.009105, -0.009424, -0.009724, -0.009947, -0.010317, -0.010483, -0.010591, -0.010699, -0.010762, -0.010793, -0.010748, -0.010607, -0.010134, -0.009764, -0.009337, -0.008852, -0.007844, -0.007360, -0.006952, -0.006620, -0.006073, -0.005876, -0.005698, -0.005481, -0.005068, -0.004871, -0.004712, -0.004553, -0.004236, -0.004096, -0.003976, -0.003856, -0.003653, -0.003609, -0.003566, -0.003541, -0.003549, -0.003582, -0.003635, -0.003725, -0.003810, -0.003786, -0.003800, -0.003833, -0.003899, -0.003989, -0.004041, -0.004017, -0.004121, -0.004097, -0.004091, -0.004086, -0.004017, -0.003955, -0.003834, -0.003752, -0.003454, -0.003276, -0.003117, -0.002901, -0.002507, -0.002233, -0.001902, -0.001570, -0.000831};
float zero_electric_angle = 0.362641;
Direction sensor_direction = Direction::CCW;

MagneticEncoderTLE5012B encoder(PINOUT::ENC_MOSI, PINOUT::ENC_MISO, PINOUT::ENC_SCLK, PINOUT::ENC_CSEL);
CalibratedSensor encoder_calibrated = CalibratedSensor(encoder);
LowsideCurrentSenseExtended current_sensor = LowsideCurrentSenseExtended(CURRENT_SENSOR_SHUNT_RESISTANCE, CURRENT_SENSOR_GAIN, PINOUT::ISEN_A, PINOUT::ISEN_B, _NC);
StepperMotor motor = StepperMotor(MOTOR_POLE_PAIR_NUMBER, MOTOR_PHASE_RESISTANCE, MOTOR_KV_RATING, MOTOR_PHASE_INDUCTANCE);
StepperDriver4PWMExtended driver = StepperDriver4PWMExtended(PINOUT::DRV_A1, PINOUT::DRV_A2, PINOUT::DRV_B1, PINOUT::DRV_B2, PINOUT::DRV_EN);

void SimpleFOCInit() 
{
    Serial.println("Starting SimpleFOC");

    extern uint8_t tim_downsample[5];
    for (int i = 0; i < 5; ++i) {
        tim_downsample[i] = 1;
    }

    motor.useMonitoring(Serial);
    motor.monitor_variables =  _MON_VEL; 
    motor.monitor_downsample = 10;

    SimpleFOCDebug::enable(&Serial);

    pinMode(PINOUT::DRV_RST, OUTPUT);
    digitalWrite(PINOUT::DRV_RST, LOW);
    delay(100);
    digitalWrite(PINOUT::DRV_RST, HIGH);
    pinMode(PINOUT::DRV_ERR, INPUT_PULLUP);

    encoder.init();
    motor.linkSensor(&encoder);
    
    driver.pwm_frequency = 20000;
    driver.voltage_power_supply = POWER_SUPPLY_VOLTAGE;
    driver.voltage_limit = POWER_SUPPLY_VOLTAGE;
    driver.init();
    
    motor.linkDriver(&driver);
    current_sensor.linkDriver(&driver);
    current_sensor.skip_align = true;

    motor.voltage_sensor_align = SENSOR_ALIGN_VOLTAGE;

    motor.torque_controller = TorqueControlType::foc_current;
    motor.controller = MotionControlType::angle;
    // motor.controller = MotionControlType::velocity_openloop;

    motor.PID_current_q.P = 3;
    motor.PID_current_q.I = 100;
    motor.PID_current_d.P = 3;
    motor.PID_current_d.I = 100;
    motor.LPF_current_q.Tf = 0.01;
    motor.LPF_current_d.Tf = 0.01;
    motor.PID_current_q.limit = POWER_SUPPLY_VOLTAGE;
    motor.PID_current_d.limit = POWER_SUPPLY_VOLTAGE;
    motor.voltage_limit = POWER_SUPPLY_VOLTAGE;

    motor.PID_velocity.P = 0.5;
    motor.PID_velocity.I = 10;
    motor.PID_velocity.D = 0.0f;
    motor.LPF_velocity.Tf = 0.05;
    motor.P_angle.P = 10.0f;
    motor.P_angle.D = 0.01f;
    motor.velocity_limit = 20;
    motor.current_limit = 1.5f;

    motor.init();

    encoder_calibrated.voltage_calibration = SENSOR_ALIGN_VOLTAGE;
    // encoder_calibrated.calibrate(motor, encoder_calibration_lut, zero_electric_angle, sensor_direction);
    encoder_calibrated.calibrate(motor);
    motor.linkSensor(&encoder_calibrated);

    current_sensor.init();
    motor.linkCurrentSense(&current_sensor);

    motor.initFOC();

    Serial.print("Current sensor A offset: ");
    Serial.println(current_sensor.offset_ia);
    Serial.print("Current sensor B offset: ");
    Serial.println(current_sensor.offset_ib);

    motor.target = 0.0f;
}

void loopFOC()
{
    motor.loopFOC();
    motor.move();
}